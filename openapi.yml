openapi: 3.0.3
info:
  title: Sanjeevani AI API
  description: |
    API documentation for Sanjeevani AI, a comprehensive blood donation management and support system for Thalassemia patients.
    This API provides endpoints for donor prediction, gamification, and multilingual chatbot services.
  version: 1.0.0
  contact:
    name: Sanjeevani AI Team
    email: support@sanjeevani-ai.org
servers:
  - url: http://localhost:5000
    description: Development server
tags:
  - name: Donor Prediction
    description: Endpoints for predicting donor availability and managing blood inventory
  - name: Gamification
    description: Endpoints for user management, badges, and leaderboard functionality
  - name: Chatbot
    description: Endpoints for multilingual support chatbot services
paths:
  /api/predict:
    post:
      tags:
        - Donor Prediction
      summary: Predict donor availability
      description: Predicts whether a specific donor will be available for donation based on historical patterns
      operationId: predictDonorAvailability
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - donor_id
              properties:
                donor_id:
                  type: string
                  description: The ID of the donor to predict
                  example: D0001
                model_type:
                  type: string
                  enum: [logistic, lstm]
                  default: logistic
                  description: The prediction model to use (logistic regression or LSTM neural network)
      responses:
        '200':
          description: Successful prediction
          content:
            application/json:
              schema:
                type: object
                properties:
                  probability:
                    type: number
                    format: float
                    description: The probability of donor availability (0.0 to 1.0)
                  available:
                    type: boolean
                    description: Whether the donor is predicted to be available
                  next_donation_date:
                    type: string
                    format: date
                    description: The estimated next donation date
                  donor_type:
                    type: string
                    description: The type of donor (regular, occasional, first_time)
                  avg_donation_interval_days:
                    type: number
                    description: The average interval between donations in days
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /api/donors:
    get:
      tags:
        - Donor Prediction
      summary: Get list of donors
      description: Retrieves a list of all donors, with optional filtering by blood group or location
      operationId: getDonors
      parameters:
        - name: blood_group
          in: query
          description: Filter donors by blood group
          schema:
            type: string
            example: O+
          required: false
        - name: location
          in: query
          description: Filter donors by location
          schema:
            type: string
            example: Mumbai
          required: false
      responses:
        '200':
          description: List of donors
          content:
            application/json:
              schema:
                type: object
                properties:
                  donors:
                    type: array
                    items:
                      type: object
                      properties:
                        donor_id:
                          type: string
                        blood_group:
                          type: string
                        location:
                          type: string
                        gender:
                          type: string
                        age:
                          type: integer
                        donor_type:
                          type: string
                  count:
                    type: integer
                    description: Total number of donors in the result
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /api/blood-inventory:
    get:
      tags:
        - Donor Prediction
      summary: Get blood inventory
      description: Retrieves the current blood inventory by blood group
      operationId: getBloodInventory
      responses:
        '200':
          description: Blood inventory information
          content:
            application/json:
              schema:
                type: object
                properties:
                  inventory:
                    type: array
                    items:
                      type: object
                      properties:
                        blood_group:
                          type: string
                          example: O+
                        units:
                          type: integer
                          description: Number of blood units available
                          example: 25
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /api/gamification/users:
    post:
      tags:
        - Gamification
      summary: Register a new user
      description: Registers a new user in the gamification system
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
                - name
                - email
              properties:
                user_id:
                  type: string
                  description: Unique identifier for the user
                  example: U1001
                name:
                  type: string
                  description: Full name of the user
                  example: John Doe
                email:
                  type: string
                  format: email
                  description: Email address of the user
                  example: john@example.com
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User registered successfully
        '400':
          description: Invalid input or user already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: User already exists
  /api/gamification/users/{user_id}/profile:
    get:
      tags:
        - Gamification
      summary: Get user profile
      description: Retrieves a user's gamification profile including badges, activities, and stats
      operationId: getUserProfile
      parameters:
        - name: user_id
          in: path
          description: ID of the user to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User profile information
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  user_id:
                    type: string
                  name:
                    type: string
                  total_donations:
                    type: integer
                  total_points:
                    type: integer
                  level:
                    type: integer
                  current_streak:
                    type: integer
                  longest_streak:
                    type: integer
                  last_donation_date:
                    type: string
                    format: date-time
                  badges:
                    type: array
                    items:
                      type: object
                      properties:
                        badge_id:
                          type: integer
                        name:
                          type: string
                        description:
                          type: string
                        image_path:
                          type: string
                        date_earned:
                          type: string
                          format: date-time
                  recent_activities:
                    type: array
                    items:
                      type: object
                      properties:
                        activity_type:
                          type: string
                        description:
                          type: string
                        points:
                          type: integer
                        date:
                          type: string
                          format: date-time
                  next_level_at:
                    type: integer
                  points_to_next_level:
                    type: integer
                  monthly_donations:
                    type: array
                    items:
                      type: object
                      properties:
                        count:
                          type: integer
                        year:
                          type: string
                        month:
                          type: string
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: User not found
  /api/gamification/users/{user_id}/donations:
    post:
      tags:
        - Gamification
      summary: Record donation
      description: Records a blood donation for a user and awards points and badges
      operationId: recordDonation
      parameters:
        - name: user_id
          in: path
          description: ID of the user recording a donation
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                donation_date:
                  type: string
                  format: date-time
                  description: The date and time of the donation (defaults to current time)
                  example: "2025-08-30 10:30:00"
      responses:
        '200':
          description: Donation recorded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Donation recorded successfully
                  new_total_donations:
                    type: integer
                  current_streak:
                    type: integer
                  points_earned:
                    type: integer
                  badges_earned:
                    type: array
                    items:
                      type: object
                      properties:
                        badge_id:
                          type: integer
                        name:
                          type: string
                        points:
                          type: integer
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: User not found
  /api/gamification/users/{user_id}/activities:
    post:
      tags:
        - Gamification
      summary: Record user activity
      description: Records a user activity other than donation (like referrals, educational activities)
      operationId: recordActivity
      parameters:
        - name: user_id
          in: path
          description: ID of the user recording an activity
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - activity_type
                - description
              properties:
                activity_type:
                  type: string
                  description: Type of activity (e.g., referral, education, event)
                  example: referral
                description:
                  type: string
                  description: Description of the activity
                  example: Referred a new donor
                points:
                  type: integer
                  description: Points to award for the activity (default 0)
                  example: 50
                activity_date:
                  type: string
                  format: date-time
                  description: Date and time of the activity (defaults to current time)
      responses:
        '200':
          description: Activity recorded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Activity recorded successfully
                  points_earned:
                    type: integer
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: User not found
  /api/gamification/leaderboard:
    get:
      tags:
        - Gamification
      summary: Get leaderboard
      description: Retrieves the top donors leaderboard
      operationId: getLeaderboard
      parameters:
        - name: limit
          in: query
          description: Maximum number of users to return
          schema:
            type: integer
            default: 10
          required: false
      responses:
        '200':
          description: Leaderboard information
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  leaderboard:
                    type: array
                    items:
                      type: object
                      properties:
                        user_id:
                          type: string
                        name:
                          type: string
                        total_donations:
                          type: integer
                        total_points:
                          type: integer
                        level:
                          type: integer
  /api/gamification/badges:
    get:
      tags:
        - Gamification
      summary: Get all badges
      description: Retrieves all available badges in the system
      operationId: getBadges
      responses:
        '200':
          description: List of available badges
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  badges:
                    type: array
                    items:
                      type: object
                      properties:
                        badge_id:
                          type: integer
                        name:
                          type: string
                        description:
                          type: string
                        points:
                          type: integer
                        image_path:
                          type: string
  /api/chatbot/chat:
    post:
      tags:
        - Chatbot
      summary: Chat with the multilingual support bot
      description: Sends a message to the chatbot and receives a response, with optional translation
      operationId: chatWithBot
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - message
              properties:
                message:
                  type: string
                  description: The user's message to the chatbot
                  example: What is Thalassemia?
                translate:
                  type: boolean
                  description: Whether to enable automatic language detection and translation
                  default: true
      responses:
        '200':
          description: Chatbot response
          content:
            application/json:
              schema:
                type: object
                properties:
                  original_text:
                    type: string
                    description: The original text sent by the user
                  detected_language:
                    type: string
                    description: The detected language code (ISO 639-1)
                    example: hi
                  translated_text:
                    type: string
                    description: The text translated to English (if non-English detected)
                  response_english:
                    type: string
                    description: The response in English
                  response:
                    type: string
                    description: The final response in the detected language
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /api/chatbot/languages:
    get:
      tags:
        - Chatbot
      summary: Get supported languages
      description: Retrieves a list of languages supported by the chatbot
      operationId: getSupportedLanguages
      responses:
        '200':
          description: List of supported languages
          content:
            application/json:
              schema:
                type: object
                properties:
                  supported_languages:
                    type: object
                    additionalProperties:
                      type: string
                    example:
                      en: English
                      hi: Hindi
                      bn: Bengali
                      ta: Tamil
components:
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: An error occurred while processing the request